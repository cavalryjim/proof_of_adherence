{"version":3,"sources":["../../../src/@ionic-native/plugins/local-notifications/index.ts"],"names":[],"mappings":"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","file":"index.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Cordova, Plugin, IonicNativePlugin } from '@ionic-native/core';\n\nexport interface ILocalNotification {\n\n  /**\n   * A unique identifier required to clear, cancel, update or retrieve the local notification in the future\n   * Default: 0\n   */\n  id?: number;\n\n  /**\n   * First row of the notification\n   * Default: Empty string (iOS) or the app name (Android)\n   */\n  title?: string;\n\n  /**\n   * Second row of the notification\n   * Default: Empty string\n   */\n  text?: string;\n\n  /**\n   * The interval at which to reschedule the local notification. That can be a value of second, minute, hour, day, week, month or year\n   * Default: 0 (which means that the system triggers the local notification once)\n   */\n  every?: string;\n\n  /**\n   * The date and time when the system should deliver the local notification. If the specified value is nil or is a date in the past, the local notification is delivered immediately.\n   * Default: now ~ new Date()\n   */\n  at?: any;\n  firstAt?: any;\n\n  /**\n   * The number currently set as the badge of the app icon in Springboard (iOS) or at the right-hand side of the local notification (Android)\n   * Default: 0 (which means don't show a number)\n   */\n  badge?: number;\n\n  /**\n   * Uri of the file containing the sound to play when an alert is displayed\n   * Default: res://platform_default\n   */\n  sound?: string;\n\n  /**\n   * Arbitrary data, objects will be encoded to JSON string\n   * Default: null\n   */\n  data?: any;\n\n  /**\n   * ANDROID ONLY\n   * Uri of the icon that is shown in the ticker and notification\n   * Default: res://icon\n   */\n  icon?: string;\n\n  /**\n   * ANDROID ONLY\n   * Uri of the resource (only res://) to use in the notification layouts. Different classes of devices may return different sizes\n   * Default: res://ic_popup_reminder\n   */\n  smallIcon?: string;\n\n  /**\n  * ANDROID ONLY\n  * RGB value for the background color of the smallIcon.\n  * Default: Androids COLOR_DEFAULT, which will vary based on Android version.\n  */\n  color?: string;\n\n\n  /**\n   * ANDROID ONLY\n   * Ongoing notifications differ from regular notifications in the following ways:\n   * - They are sorted above the regular notifications in the notification panel\n   * - They do not have an 'X' close button, and are not affected by the \"Clear all\" button\n   * Default: false\n   */\n  ongoing?: boolean;\n\n  /**\n   * ANDROID ONLY\n   * ARGB value that you would like the LED on the device to blink\n   * Default: FFFFFF\n   */\n  led?: string;\n\n  /**\n  * Notification priority.\n  */\n  priority?: number;\n}\n\n/**\n * @name Local Notifications\n * @description\n * This plugin allows you to display local notifications on the device\n *\n * @usage\n * ```typescript\n * import { LocalNotifications } from '@ionic-native/local-notifications';\n *\n *\n * constructor(private localNotifications: LocalNotifications) { }\n *\n * ...\n *\n *\n * // Schedule a single notification\n * this.localNotifications.schedule({\n *   id: 1,\n *   text: 'Single ILocalNotification',\n *   sound: isAndroid? 'file://sound.mp3': 'file://beep.caf',\n *   data: { secret: key }\n * });\n *\n *\n * // Schedule multiple notifications\n * this.localNotifications.schedule([{\n *    id: 1,\n *    text: 'Multi ILocalNotification 1',\n *    sound: isAndroid ? 'file://sound.mp3': 'file://beep.caf',\n *    data: { secret:key }\n *   },{\n *    id: 2,\n *    title: 'Local ILocalNotification Example',\n *    text: 'Multi ILocalNotification 2',\n *    icon: 'http://example.com/icon.png'\n * }]);\n *\n *\n * // Schedule delayed notification\n * this.localNotifications.schedule({\n *    text: 'Delayed ILocalNotification',\n *    at: new Date(new Date().getTime() + 3600),\n *    led: 'FF0000',\n *    sound: null\n * });\n * ```\n * @interfaces\n * ILocalNotification\n */\n@Plugin({\n  pluginName: 'LocalNotifications',\n  plugin: 'de.appplant.cordova.plugin.local-notification',\n  pluginRef: 'cordova.plugins.notification.local',\n  repo: 'https://github.com/katzer/cordova-plugin-local-notifications',\n  platforms: ['Android', 'iOS', 'Windows']\n})\n\nexport class LocalNotifications extends IonicNativePlugin {\n\n  /**\n   * Schedules a single or multiple notifications\n   * @param options {Notification | Array<ILocalNotification>} optional\n   */\n  @Cordova({\n    sync: true\n  })\n  schedule(options?: ILocalNotification | Array<ILocalNotification>): void { }\n\n  /**\n   * Updates a previously scheduled notification. Must include the id in the options parameter.\n   * @param options {ILocalNotification} optional\n   */\n  @Cordova({\n    sync: true\n  })\n  update(options?: ILocalNotification): void { }\n\n  /**\n   * Clears single or multiple notifications\n   * @param notificationId {any} A single notification id, or an array of notification ids.\n   * @returns {Promise<any>} Returns a promise when the notification had been cleared\n   */\n  @Cordova()\n  clear(notificationId: any): Promise<any> { return; }\n\n  /**\n   * Clears all notifications\n   * @returns {Promise<any>} Returns a promise when all notifications have cleared\n   */\n  @Cordova({\n    successIndex: 0,\n    errorIndex: 2\n  })\n  clearAll(): Promise<any> { return; }\n\n  /**\n   * Cancels single or multiple notifications\n   * @param notificationId {any} A single notification id, or an array of notification ids.\n   * @returns {Promise<any>} Returns a promise when the notification is canceled\n   */\n  @Cordova()\n  cancel(notificationId: any): Promise<any> { return; }\n\n  /**\n   * Cancels all notifications\n   * @returns {Promise<any>} Returns a promise when all notifications are canceled\n   */\n  @Cordova({\n    successIndex: 0,\n    errorIndex: 2\n  })\n  cancelAll(): Promise<any> { return; }\n\n  /**\n   * Checks presence of a notification\n   * @param notificationId {number}\n   * @returns {Promise<boolean>}\n   */\n  @Cordova()\n  isPresent(notificationId: number): Promise<boolean> { return; }\n\n  /**\n   * Checks is a notification is scheduled\n   * @param notificationId {number}\n   * @returns {Promise<boolean>}\n   */\n  @Cordova()\n  isScheduled(notificationId: number): Promise<boolean> { return; }\n\n  /**\n   * Checks if a notification is triggered\n   * @param notificationId {number}\n   * @returns {Promise<boolean>}\n   */\n  @Cordova()\n  isTriggered(notificationId: number): Promise<boolean> { return; }\n\n  /**\n   * Get all the notification ids\n   * @returns {Promise<Array<number>>}\n   */\n  @Cordova()\n  getAllIds(): Promise<Array<number>> { return; }\n\n  /**\n   * Get the ids of triggered notifications\n   * @returns {Promise<Array<number>>}\n   */\n  @Cordova()\n  getTriggeredIds(): Promise<Array<number>> { return; }\n\n  /**\n   * Get the ids of scheduled notifications\n   * @returns {Promise<Array<number>>} Returns a promise\n   */\n  @Cordova()\n  getScheduledIds(): Promise<Array<number>> { return; }\n\n  /**\n   * Get a notification object\n   * @param notificationId {any} The id of the notification to get\n   * @returns {Promise<ILocalNotification>}\n   */\n  @Cordova()\n  get(notificationId: any): Promise<ILocalNotification> { return; }\n\n  /**\n   * Get a scheduled notification object\n   * @param notificationId {any} The id of the notification to get\n   * @returns {Promise<ILocalNotification>}\n   */\n  @Cordova()\n  getScheduled(notificationId: any): Promise<ILocalNotification> { return; }\n\n  /**\n   * Get a triggered notification object\n   * @param notificationId The id of the notification to get\n   * @returns {Promise<ILocalNotification>}\n   */\n  @Cordova()\n  getTriggered(notificationId: any): Promise<ILocalNotification> { return; }\n\n  /**\n   * Get all notification objects\n   * @returns {Promise<Array<ILocalNotification>>}\n   */\n  @Cordova()\n  getAll(): Promise<Array<ILocalNotification>> { return; }\n\n  /**\n   * Get all scheduled notification objects\n   * @returns {Promise<Array<ILocalNotification>>}\n   */\n  @Cordova()\n  getAllScheduled(): Promise<Array<ILocalNotification>> { return; }\n\n  /**\n   * Get all triggered notification objects\n   * @returns {Promise<Array<ILocalNotification>>}\n   */\n  @Cordova()\n  getAllTriggered(): Promise<Array<ILocalNotification>> { return; }\n\n  /**\n   * Register permission to show notifications if not already granted.\n   * @returns {Promise<boolean>}\n   */\n  @Cordova()\n  registerPermission(): Promise<boolean> { return; }\n\n  /**\n   * Informs if the app has the permission to show notifications.\n   * @returns {Promise<boolean>}\n   */\n  @Cordova()\n  hasPermission(): Promise<boolean> { return; }\n\n\n  /**\n   * Sets a callback for a specific event\n   * @param eventName The name of the event. Available events: schedule, trigger, click, update, clear, clearall, cancel, cancelall\n   * @param callback Call back function. All events return notification and state parameter. clear and clearall return state parameter only.\n   */\n  @Cordova({\n    sync: true\n  })\n  on(eventName: string, callback: any): void { }\n\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}