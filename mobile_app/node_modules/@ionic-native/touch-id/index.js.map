{"version":3,"sources":["../../../src/@ionic-native/plugins/touch-id/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAO,EAAE,UAAA,EAAW,MAAO,eAAA,CAAgB;AAC3C,OAAO,EAAE,OAAA,EAAS,MAAA,EAAQ,iBAAA,EAAkB,MAAO,oBAAA,CAAqB;AAGxE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAwCG;AASH,IAAa,OAAO;IAAS,2BAAiB;IAA9C;;IAoDA,CAAC;IAlDC;;;;OAIG;IAEH,6BAAW,GAAX,cAA8B,MAAM,CAAC,CAAC,CAAC;IAEvC;;;;;OAKG;IAEH,mCAAiB,GAAjB,UAAkB,OAAe,IAAkB,MAAM,CAAC,CAAC,CAAC;IAE5D;;;;;OAKG;IAEH,6DAA2C,GAA3C,UAA4C,OAAe,IAAkB,MAAM,CAAC,CAAC,CAAC;IAEtF;;;;;;OAMG;IAEH,kFAAgE,GAAhE,UAAiE,OAAe,EAAE,kBAA0B,IAAkB,MAAM,CAAC,CAAC,CAAC;IAEvI;;;;OAIG;IAEH,8CAA4B,GAA5B,cAA+C,MAAM,CAAC,CAAC,CAAC;IAQ1D,cAAC;AAAD,CApDA,AAoDC,CApD4B,iBAAiB,GAoD7C;AANM,kBAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;CACnB,CAAC;AACF,kBAAkB;AACX,sBAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;AA3CA;IADC,OAAO,EAAE;;;;0CAC6B;AASvC;IADC,OAAO,EAAE;;;;gDACkD;AAS5D;IADC,OAAO,EAAE;;;;0EAC4E;AAUtF;IADC,OAAO,EAAE;;;;+FAC6H;AAQvI;IADC,OAAO,EAAE;;;;2DAC8C;AA5C7C,OAAO;IARnB,MAAM,CAAC;QACN,UAAU,EAAE,SAAS;QACrB,MAAM,EAAE,yBAAyB;QACjC,SAAS,EAAE,iBAAiB;QAC5B,IAAI,EAAE,2DAA2D;QACjE,SAAS,EAAE,CAAC,KAAK,CAAC;KACnB,CAAC;GAEW,OAAO,CAoDnB;SApDY,OAAO","file":"index.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Cordova, Plugin, IonicNativePlugin } from '@ionic-native/core';\r\n\r\n\r\n/**\r\n * @name Touch ID\r\n * @description\r\n * Scan the fingerprint of a user with the TouchID sensor.\r\n *\r\n * Requires Cordova plugin: `cordova-plugin-touch-id`. For more info, please see the [TouchID plugin docs](https://github.com/EddyVerbruggen/cordova-plugin-touch-id).\r\n *\r\n * @usage\r\n * ```typescript\r\n * import { TouchID } from '@ionic-native/touch-id';\r\n *\r\n * constructor(private touchId: TouchID) { }\r\n *\r\n * ...\r\n *\r\n * this.touchId.isAvailable()\r\n *   .then(\r\n *     res => console.log('TouchID is available!'),\r\n *     err => console.error('TouchID is not available', err)\r\n *   );\r\n *\r\n * this.touchId.verifyFingerprint('Scan your fingerprint please')\r\n *   .then(\r\n *     res => console.log('Ok', res),\r\n *     err => console.error('Error', err)\r\n *   );\r\n * ```\r\n *\r\n * ### Error Codes\r\n *\r\n * The plugin will reject for various reasons. Your app will most likely need to respond to the cases differently.\r\n *\r\n * Here is a list of some of the error codes:\r\n *\r\n *  -  `-1` - Fingerprint scan failed more than 3 times\r\n *  -  `-2` or `-128` - User tapped the 'Cancel' button\r\n *  -  `-3` - User tapped the 'Enter Passcode' or 'Enter Password' button\r\n *  -  `-4` - The scan was cancelled by the system (Home button for example)\r\n *  -  `-6` - TouchID is not Available\r\n *  -  `-8` - TouchID is locked out from too many tries\r\n */\r\n@Plugin({\r\n  pluginName: 'TouchID',\r\n  plugin: 'cordova-plugin-touch-id',\r\n  pluginRef: 'plugins.touchid',\r\n  repo: 'https://github.com/EddyVerbruggen/cordova-plugin-touch-id',\r\n  platforms: ['iOS']\r\n})\r\n\r\nexport class TouchID extends IonicNativePlugin {\r\n\r\n  /**\r\n   * Checks Whether TouchID is available or not.\r\n   *\r\n   * @returns {Promise<any>} Returns a Promise that resolves if yes, rejects if no.\r\n   */\r\n  @Cordova()\r\n  isAvailable(): Promise<any> { return; }\r\n\r\n  /**\r\n   * Show TouchID dialog and wait for a fingerprint scan. If user taps 'Enter Password' button, brings up standard system passcode screen.\r\n   *\r\n   * @param {string} message  The message to display\r\n   * @returns {Promise<any>} Returns a Promise the resolves if the fingerprint scan was successful, rejects with an error code (see above).\r\n   */\r\n  @Cordova()\r\n  verifyFingerprint(message: string): Promise<any> { return; }\r\n\r\n  /**\r\n   * Show TouchID dialog and wait for a fingerprint scan. If user taps 'Enter Password' button, rejects with code '-3' (see above).\r\n   *\r\n   * @param {string} message  The message to display\r\n   * @returns {Promise<any>} Returns a Promise the resolves if the fingerprint scan was successful, rejects with an error code (see above).\r\n   */\r\n  @Cordova()\r\n  verifyFingerprintWithCustomPasswordFallback(message: string): Promise<any> { return; }\r\n\r\n  /**\r\n   * Show TouchID dialog with custom 'Enter Password' message and wait for a fingerprint scan. If user taps 'Enter Password' button, rejects with code '-3' (see above).\r\n   *\r\n   * @param {string} message  The message to display\r\n   * @param {string} enterPasswordLabel  Custom text for the 'Enter Password' button\r\n   * @returns {Promise<any>} Returns a Promise the resolves if the fingerprint scan was successful, rejects with an error code (see above).\r\n   */\r\n  @Cordova()\r\n  verifyFingerprintWithCustomPasswordFallbackAndEnterPasswordLabel(message: string, enterPasswordLabel: string): Promise<any> { return; }\r\n\r\n  /**\r\n   * Checks if the fingerprint database changed.\r\n   *\r\n   * @returns {Promise<any>} Returns a Promise that resolves if yes, rejects if no.\r\n   */\r\n  @Cordova()\r\n  didFingerprintDatabaseChange(): Promise<any> { return; }\r\n\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}