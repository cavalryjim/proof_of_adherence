{"version":3,"sources":["../src/app/firebase_app.ts"],"names":["createFirebaseNamespace","LocalPromise","Promise","DEFAULT_ENTRY_NAME","FirebaseAppImpl","options","name","firebase_","isDeleted_","services_","name_","options_","Object","keys","INTERNAL","factories","forEach","serviceName","factoryName","useAsService","getService","bind","resolve","checkDestroyed_","then","removeApp","services","serviceKey","instanceKey","push","all","map","service","delete","instanceString","instanceSpecifier","firebaseService","extendApp","props","error","prototype","console","log","apps_","appHooks","namespace","undefined","app","callAppHooks","getToken","callback","setTimeout","createService","serviceProperties","appHook","allowMultipleInstances","serviceNamespace","appArg","GoogPromise","defineProperty","get","result","eventName","code","args","appErrors","create","errors"],"mappings":";;;;;;qjBAAA;;;;;;;;;;;;;;;;;QAuVMA,uB,GAAAA,uB;;AAxUN;;AAKA;;AAIA;;AACA;;;;AAkMA,IAAIC,eAAe,sBAAMC,OAAzB;AAEA,IAAMC,qBAAqB,WAA3B;AAEA;;;;;IAIAC,e;AAQE,6BAAYC,OAAZ,EACYC,IADZ,EAEoBC,SAFpB,EAEgD;AAAA;;AAAA;;AAA5B,aAAAA,SAAA,GAAAA,SAAA;AAPZ,aAAAC,UAAA,GAAa,KAAb;AACA,aAAAC,SAAA,GACyD,EADzD;AAON,aAAKC,KAAL,GAAaJ,IAAb;AACA,aAAKK,QAAL,GAAgB,yBAA0BN,OAA1B,CAAhB;AAEAO,eAAOC,IAAP,CAAYN,UAAUO,QAAV,CAAmBC,SAA/B,EAA0CC,OAA1C,CAAkD,UAACC,WAAD,EAAY;AAC5D;AACA,gBAAIC,cAAcX,UAAUO,QAAV,CAAmBK,YAAnB,QAAsCF,WAAtC,CAAlB;AACA,gBAAIC,gBAAgB,IAApB,EAA0B;AACxB;AACD;AAED;AACA,gBAAIE,aAAa,MAAKA,UAAL,CAAgBC,IAAhB,QAA2BH,WAA3B,CAAjB;AACA,iDAAoBD,WAApB,EAAiCG,UAAjC;AACD,SAVD;AAWD;;;;kCAYK;AAAA;;AACJ,mBAAO,IAAInB,YAAJ,CAAiB,UAACqB,OAAD,EAAQ;AAC9B,uBAAKC,eAAL;AACAD;AACD,aAHM,EAIJE,IAJI,CAIC,YAAA;AACJ,uBAAKjB,SAAL,CAAeO,QAAf,CAAwBW,SAAxB,CAAkC,OAAKf,KAAvC;AACA,oBAAIgB,WAA8B,EAAlC;AACAd,uBAAOC,IAAP,CAAY,OAAKJ,SAAjB,EAA4BO,OAA5B,CAAoC,UAACW,UAAD,EAAW;AAC7Cf,2BAAOC,IAAP,CAAY,OAAKJ,SAAL,CAAekB,UAAf,CAAZ,EAAwCX,OAAxC,CAAgD,UAACY,WAAD,EAAY;AAC1DF,iCAASG,IAAT,CAAc,OAAKpB,SAAL,CAAekB,UAAf,EAA2BC,WAA3B,CAAd;AACD,qBAFD;AAGD,iBAJD;AAKA,uBAAO3B,aAAa6B,GAAb,CAAiBJ,SAASK,GAAT,CAAa,UAACC,OAAD,EAAQ;AAC3C,2BAAOA,QAAQlB,QAAR,CAAkBmB,MAAlB,EAAP;AACD,iBAFuB,CAAjB,CAAP;AAGD,aAfI,EAgBJT,IAhBI,CAgBC,YAAA;AACJ,uBAAKhB,UAAL,GAAkB,IAAlB;AACA,uBAAKC,SAAL,GAAiB,EAAjB;AACD,aAnBI,CAAP;AAoBD;AAED;;;;;;;mCAImBH,I,EAAc4B,c,EAAuB;AAEtD,iBAAKX,eAAL;AAEA,gBAAI,OAAO,KAAKd,SAAL,CAAeH,IAAf,CAAP,KAAgC,WAApC,EAAiD;AAC/C,qBAAKG,SAAL,CAAeH,IAAf,IAAuB,EAAvB;AACD;AAED,gBAAI6B,oBAAoBD,kBAAkB/B,kBAA1C;AACA,gBAAI,OAAO,KAAKM,SAAL,CAAeH,IAAf,EAAsB6B,iBAAtB,CAAP,KAAoD,WAAxD,EAAqE;AACnE,oBAAIC,kBAAkB,KAAK7B,SAAL,CAAeO,QAAf,CAAwBC,SAAxB,CAAkCT,IAAlC,EAClB,IADkB,EACZ,KAAK+B,SAAL,CAAehB,IAAf,CAAoB,IAApB,CADY,EACea,cADf,CAAtB;AAEA,qBAAKzB,SAAL,CAAeH,IAAf,EAAsB6B,iBAAtB,IAA2CC,eAA3C;AACA,uBAAOA,eAAP;AACD,aALD,MAKO;AACL,uBAAO,KAAK3B,SAAL,CAAeH,IAAf,EAAsB6B,iBAAtB,CAAP;AACD;AACF;AAED;;;;;;;kCAIkBG,K,EAA4B;AAC5C,uCAAW,IAAX,EAAiBA,KAAjB;AACD;AAED;;;;;;;0CAIuB;AACrB,gBAAI,KAAK9B,UAAT,EAAqB;AACnB+B,sBAAM,aAAN,EAAqB,EAAC,QAAQ,KAAK7B,KAAd,EAArB;AACD;AACF;;;4BAxEO;AACN,iBAAKa,eAAL;AACA,mBAAO,KAAKb,KAAZ;AACD;;;4BAEU;AACT,iBAAKa,eAAL;AACA,mBAAO,KAAKZ,QAAZ;AACD;;;;;;AAmEH;AACA;AACAP,gBAAgBoC,SAAhB,CAA0BlC,IAA1B,IACEF,gBAAgBoC,SAAhB,CAA0BnC,OAD5B,IAEED,gBAAgBoC,SAAhB,CAA0BP,MAF5B,IAGEQ,QAAQC,GAAR,CAAY,IAAZ,CAHF;AAKA;;;;;;;AAOM,SAAA1C,uBAAA,GAAA;AACJ,QAAI2C,QAAuC,EAA3C;AACA,QAAI5B,YAAyD,EAA7D;AACA,QAAI6B,WAAyC,EAA7C;AAEA;AACA,QAAIC,YAAY;AACd;AACA;AACA,sBAAc,IAHA;AAId;AA4DF;;;AAGA,kBAAuBxC,OAAvB,EAAiDC,IAAjD,EAA8D;AAC5D,gBAAIA,SAASwC,SAAb,EAAwB;AACtBxC,uBAAOH,kBAAP;AACD,aAFD,MAEO;AACL,oBAAI,OAAOG,IAAP,KAAgB,QAAhB,IAA4BA,SAAS,EAAzC,EAA6C;AAC3CiC,0BAAM,cAAN,EAAsB,EAAC,QAAQjC,OAAO,EAAhB,EAAtB;AACD;AACF;AACD,gBAAIqC,MAAMrC,IAAN,MAAiBwC,SAArB,EAAgC;AAC9BP,sBAAM,eAAN,EAAuB,EAAC,QAAQjC,IAAT,EAAvB;AACD;AACD,gBAAIyC,MAAM,IAAI3C,eAAJ,CAAoBC,OAApB,EAA6BC,IAA7B,EACsBuC,SADtB,CAAV;AAEAF,kBAAMrC,IAAN,IAAeyC,GAAf;AACAC,yBAAaD,GAAb,EAAkB,QAAlB;AAEA;AACA;AACA;AACA,gBAAIA,IAAIjC,QAAJ,IAAgBgC,SAAhB,IAA6BC,IAAIjC,QAAJ,CAAamC,QAAb,IAAyBH,SAA1D,EAAqE;AACnE,2CAAWC,GAAX,EAAgB;AACdjC,8BAAU;AACR,kCAAU;AAAA,mCAAM,IAAN;AAAA,yBADF;AAER,oCAAY;AAAA,mCAAMb,aAAaqB,OAAb,CAAqB,IAArB,CAAN;AAAA,yBAFJ;AAGR,gDAAwB,8BAAC4B,QAAD,EAAuC;AAC7D;AACAC,uCAAW;AAAA,uCAAMD,SAAS,IAAT,CAAN;AAAA,6BAAX,EAAiC,CAAjC;AACD,yBANO;AAOR,mDAA2B,mCAAA,CAAe;AAPlC;AADI,iBAAhB;AAWD;AACD,mBAAOH,GAAP;AACD;AAED;;;AAtGgB;AAKd,eAAOA,GALO;AAMd,gBAAQ,IANM;AAOd,mBAAW9C,YAPG;AAQd,uBAAe,mBARD;AASd,oBAAY;AACV;AAoGJ;;;;;;;AAOA,sBACIK,IADJ,EAEI8C,aAFJ,EAGIC,iBAHJ,EAIIC,OAJJ,EAKIC,sBALJ,EAKoC;AAElC,oBAAIxC,UAAUT,IAAV,CAAJ,EAAqB;AACnBiC,0BAAM,mBAAN,EAA2B,EAAC,QAAQjC,IAAT,EAA3B;AACD;AACD,oBAAI,CAAC,CAACiD,sBAAN,EAA8B;AAC5B;AACAxC,8BAAUT,IAAV,IAAkB8C,aAAlB;AACD,iBAHD,MAGO;AACL;AACA;AACArC,8BAAUT,IAAV,IACI,UAACyC,GAAD,EAAmBV,SAAnB,EACwB;AACtB;AACA;AACA,+BAAOe,cAAcL,GAAd,EAAmBV,SAAnB,EAA8BlC,kBAA9B,CAAP;AACD,qBANL;AAOD;AACD,oBAAImD,OAAJ,EAAa;AACXV,6BAAStC,IAAT,IAAiBgD,OAAjB;AACD;AAED,oBAAIE,yBAAJ;AAEA;AACAA,mCAAmB,UAACC,MAAD,EAAqB;AACtC,wBAAIA,WAAWX,SAAf,EAA0B;AACxBW,iCAASV,KAAT;AACD;AACD,wBAAI,OAAOU,OAAenD,IAAf,CAAP,KAAgC,UAApC,EAAgD;AAC9C;AACA;AACAiC,8BAAM,sBAAN,EAA8B,EAAC,QAAQjC,IAAT,EAA9B;AACD;AACD;AACA,2BAAQmD,OAAenD,IAAf,GAAR;AACD,iBAXD;AAaA;AACA,oBAAI+C,sBAAsBP,SAA1B,EAAqC;AACnC,+CAAWU,gBAAX,EAA6BH,iBAA7B;AACD;AAED;AACCR,0BAAkBvC,IAAlB,IAA0BkD,gBAA1B;AAED,uBAAOA,gBAAP;AACD;AAED;;;;;AAnKc;AAEV,uCAA2BxD,uBAFjB;AAGV,+BAqKJ,UAAyBsC,KAAzB,EAAqD;AACnD,2CAAWO,SAAX,EAAsBP,KAAtB;AACD,aA1Ka;AAIV,yDAJU;AAKV,gDALU;AAMV;AAyBJ;;;;AAIA,sBAAmBhC,IAAnB,EAA+B;AAC7B,oBAAIyC,MAAMJ,MAAMrC,IAAN,CAAV;AACA0C,6BAAaD,GAAb,EAAkB,QAAlB;AACA,uBAAOJ,MAAMrC,IAAN,CAAP;AACD;AAED;;;AAzCc;AAOV,yBAAaS,SAPH;AAQV,4BAAgBI,YARN;AASV,uBAAW,sBAAMuC,WATP;AAUV;AAVU;AATE,KAAhB;AAuBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAcb,SAAd,EAAyB,SAAzB,EAAoCA,SAApC;AAEA;AACAjC,WAAO+C,cAAP,CAAsBd,SAAtB,EAAiC,MAAjC,EAAyC;AACvCe,aAoEF,YAAA;AACE;AACA,mBAAOhD,OAAOC,IAAP,CAAY8B,KAAZ,EAAmBZ,GAAnB,CAAuB,UAACzB,IAAD;AAAA,uBAAUqC,MAAMrC,IAAN,CAAV;AAAA,aAAvB,CAAP;AACD;AAxEwC,KAAzC,EAiBA,SAAAyC,GAAA,CAAazC,IAAb,EAA0B;AACxBA,eAAOA,QAAQH,kBAAf;AACA,YAAI0D,SAASlB,MAAMrC,IAAN,CAAb;AACA,YAAIuD,WAAWf,SAAf,EAA0B;AACxBP,kBAAM,QAAN,EAAgB,EAAC,QAAQjC,IAAT,EAAhB;AACD;AACD,eAAOuD,MAAP;AACD;AAED,kCAAcd,GAAd,EAAmB,KAAnB,EAA0B3C,eAA1B;AAuHA,aAAA4C,YAAA,CAAsBD,GAAtB,EAAwCe,SAAxC,EAAyD;AACvDlD,eAAOC,IAAP,CAAYE,SAAZ,EAAuBC,OAAvB,CAA+B,UAACC,WAAD,EAAY;AACzC;AACA,gBAAIC,cAAcC,aAAa4B,GAAb,EAAkB9B,WAAlB,CAAlB;AACA,gBAAIC,gBAAgB,IAApB,EAA0B;AACxB;AACD;AAED,gBAAI0B,SAAS1B,WAAT,CAAJ,EAA2B;AACzB0B,yBAAS1B,WAAT,EAAsB4C,SAAtB,EAAiCf,GAAjC;AACD;AACF,SAVD;AAWD;AAED;AACA;AACA,aAAA5B,YAAA,CAAsB4B,GAAtB,EAAwCzC,IAAxC,EAAoD;AAClD,YAAIA,SAAS,YAAb,EAA2B;AACzB,mBAAO,IAAP;AACD;AAGayC,YAAI1C,OANgC;;AAQlD,eAHiBC,IAGjB;AACD;AAED,WAAQuC,SAAR;AACD;AAKD,SAAAN,KAAA,CAAewB,IAAf,EAA+BC,IAA/B,EAA2D;AACzD,UAAMC,UAAUC,MAAV,CAAiBH,IAAjB,EAAuBC,IAAvB,CAAN;AACD;AAED;AACA;AACA,IAAIG,SAAmC;AACrC,cAAU,oDACN,mCAFiC;AAGrC,oBAAgB,6BAHqB;AAIrC,qBAAiB,+CAJoB;AAKrC,mBAAe,gDALsB;AAMrC,yBAAqB,uDANgB;AAOrC,wBAAoB,kDAChB,8DADgB,GAEhB,qEAFgB,GAGhB,aAViC;AAWrC,4BAAwB,sDACpB;AAZiC,CAAvC;AAeA,IAAIF,YAAY,yBAA2B,KAA3B,EAAkC,UAAlC,EAA8CE,MAA9C,CAAhB","file":"firebase_app.js","sourcesContent":["/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\nimport { \n  createSubscribe,\n  Observer,\n  Subscribe\n} from './subscribe';\nimport { \n  ErrorFactory,\n  FirebaseError\n} from './errors';\nimport { local } from './shared_promise';\nimport { patchProperty, deepCopy, deepExtend } from './deep_copy';\n\nexport interface FirebaseAuthTokenData { accessToken: string; }\n\nexport interface FirebaseAppInternals {\n  getToken(refreshToken?: boolean): Promise< FirebaseAuthTokenData | null >;\n  getUid(): string|null;\n  addAuthTokenListener(fn: (token: string|null) => void): void;\n  removeAuthTokenListener(fn: (token: string|null) => void): void;\n}\n\nexport type FirebaseOptions = { \n  apiKey?: string,\n  authDomain?: string,\n  databaseURL?: string,\n  projectId?: string,\n  storageBucket?: string,\n  messagingSenderId?: string\n  [name: string]: any \n};\n\n// An instance of the firebase.App\nexport interface FirebaseApp {\n  /**\n   * The (read-only) name (identifier) for this App. '[DEFAULT]' is the default\n   * App.\n   */\n  name: string;\n\n  /**\n   * The (read-only) configuration options from the app initialization.\n   */\n  options: FirebaseOptions;\n\n  /**\n   * Make the given App unusable and free resources.\n   */\n  delete(): Promise<void>;\n\n  INTERNAL: FirebaseAppInternals;\n}\n\nexport interface FirebaseServiceInternals {\n  /**\n   * Delete the service and free it's resources - called from\n   * app.delete().\n   */\n  delete(): Promise<void>;\n}\n\n// Services are exposed through instances - each of which is associated with a\n// FirebaseApp.\nexport interface FirebaseService {\n  app: FirebaseApp;\n  INTERNAL?: FirebaseServiceInternals;\n}\n\nexport type AppHook = (event: string, app: FirebaseApp) => void;\n\n/**\n * Firebase Services create instances given a Firebase App instance and can\n * optionally add properties and methods to each FirebaseApp via the extendApp()\n * function.\n */\nexport interface FirebaseServiceFactory {\n  (app: FirebaseApp, extendApp?: (props: {[prop: string]: any}) => void,\n   instanceString?: string): FirebaseService;\n}\n\n/**\n * All ServiceNamespaces extend from FirebaseServiceNamespace\n */\nexport interface FirebaseServiceNamespace <T extends FirebaseService> {\n  (app?: FirebaseApp): T;\n}\n\nexport interface FirebaseErrorFactory<T> {\n  create(code: T, data?: {[prop: string]: any}): FirebaseError;\n}\n\nexport interface FirebaseErrorFactoryClass {\n  new (service: string, serviceName: string, errors: {[code: string]: string}): FirebaseErrorFactory<any>;\n}\n\nexport interface FirebaseNamespace {\n  /**\n   * Create (and intialize) a FirebaseApp.\n   *\n   * @param options Options to configure the services use in the App.\n   * @param name The optional name of the app to initialize ('[DEFAULT]' if\n   *   none)\n   */\n  initializeApp(options: FirebaseOptions, name?: string): FirebaseApp;\n\n  app: {\n    /**\n     * Retrieve an instance of a FirebaseApp.\n     *\n     * Usage: firebase.app()\n     *\n     * @param name The optional name of the app to return ('[DEFAULT]' if none)\n     */\n    (name?: string): FirebaseApp;\n\n    /**\n     * For testing FirebaseApp instances:\n     *   app() instanceof firebase.app.App\n     * DO NOT call this constuctor directly (use firebase.app() instead).\n     */\n    App: Function;\n  };\n\n  /**\n   * A (read-only) array of all the initialized Apps.\n   */\n  apps: FirebaseApp[];\n\n  // Inherit the type information of our exported Promise implementation from\n  // es6-promises.\n  Promise: typeof Promise;\n\n  // The current SDK version ('4.0.0').\n  SDK_VERSION: string;\n\n  // TODO: Migrate to firebase-app-internal.d.ts\n  INTERNAL: {\n    /**\n     * Internal API to register a Firebase Service into the firebase namespace.\n     *\n     * Each service will create a child namespace (firease.name) which acts as\n     * both a namespace for service specific properties, and also as a service\n     * accessor function (firebase.name() or firebase.name(app)).\n     *\n     * @param name The Firebase Service being registered.\n     * @param createService Factory function to create a service instance.\n     * @param serviceProperties Properties to copy to the service's namespace.\n     * @param appHook All appHooks called before intializeApp returns to caller.\n     * @param allowMultipleInstances Whether the registered service supports\n     *   multiple instances per app. If not specified, the default is false.\n     */\n    registerService(\n        name: string, \n        createService: FirebaseServiceFactory,\n        serviceProperties?: {[prop: string]: any}, \n        appHook?: AppHook,\n        allowMultipleInstances?: boolean): FirebaseServiceNamespace<FirebaseService>;\n\n    /**\n     * Just used for testing to start from a fresh namespace.\n     */\n    createFirebaseNamespace(): FirebaseNamespace;\n\n    /**\n     * Internal API to install properties on the top-level firebase namespace.\n     * @prop props The top level properties of this object are copied to the\n     *   namespace.\n     */\n    extendNamespace(props: {[prop: string]: any}): void;\n\n    /**\n     * Create a Subscribe function.  A proxy Observer is created so that\n     * events can be sent to single Observer to be fanned out automatically.\n     */\n    createSubscribe<T>(\n        executor: (observer: Observer<T>) => void,\n        onNoObservers?: (observer: Observer<T>) => void): Subscribe<T>;\n\n    /**\n     * Utility exposed for internal testing.\n     */\n    deepExtend(target: any, source: any): any;\n\n    /**\n     * Internal API to remove an app from the list of registered apps.\n     */\n    removeApp(name: string): void;\n\n    /**\n     * Service factories for each registered service.\n     */\n    factories: {[name: string]: FirebaseServiceFactory};\n\n    /*\n     * Convert service name to factory name to use.\n     */\n    useAsService(app: FirebaseApp, serviceName: string): string | null;\n\n    /**\n     * Use to construct all thrown FirebaseError's.\n     */\n    ErrorFactory: FirebaseErrorFactoryClass;\n  }\n}\n\nlet LocalPromise = local.Promise as typeof Promise;\n\nconst DEFAULT_ENTRY_NAME = '[DEFAULT]';\n\n/**\n * Global context object for a collection of services using\n * a shared authentication state.\n */\nclass FirebaseAppImpl implements FirebaseApp {\n  private options_: FirebaseOptions;\n  private name_: string;\n  private isDeleted_ = false;\n  private services_: {[name: string]:\n                          {[instance: string]: FirebaseService}} = {};\n  public INTERNAL: FirebaseAppInternals;\n\n  constructor(options: FirebaseOptions,\n              name: string,\n              private firebase_: FirebaseNamespace) {\n    this.name_ = name;\n    this.options_ = deepCopy<FirebaseOptions>(options);\n\n    Object.keys(firebase_.INTERNAL.factories).forEach((serviceName) => {\n      // Ignore virtual services\n      let factoryName = firebase_.INTERNAL.useAsService(this, serviceName);\n      if (factoryName === null) {\n        return;\n      }\n\n      // Defer calling createService until service is accessed.\n      let getService = this.getService.bind(this, factoryName);\n      patchProperty(this, serviceName, getService);\n    });\n  }\n\n  get name(): string {\n    this.checkDestroyed_();\n    return this.name_;\n  }\n\n  get options(): FirebaseOptions {\n    this.checkDestroyed_();\n    return this.options_;\n  }\n\n  delete(): Promise<void> {\n    return new LocalPromise((resolve) => {\n      this.checkDestroyed_();\n      resolve();\n    })\n      .then(() => {\n        this.firebase_.INTERNAL.removeApp(this.name_);\n        let services: FirebaseService[] = [];\n        Object.keys(this.services_).forEach((serviceKey) => {\n          Object.keys(this.services_[serviceKey]).forEach((instanceKey) => {\n            services.push(this.services_[serviceKey][instanceKey]);\n          });\n        });\n        return LocalPromise.all(services.map((service) => {\n          return service.INTERNAL!.delete();\n        }));\n      })\n      .then((): void => {\n        this.isDeleted_ = true;\n        this.services_ = {};\n      });\n  }\n\n  /**\n   * Return the service instance associated with this app (creating it\n   * on demand).\n   */\n  private getService(name: string, instanceString?: string): FirebaseService\n      |null {\n    this.checkDestroyed_();\n\n    if (typeof this.services_[name] === 'undefined') {\n      this.services_[name] = {};\n    }\n\n    let instanceSpecifier = instanceString || DEFAULT_ENTRY_NAME;\n    if (typeof this.services_[name]![instanceSpecifier] === 'undefined') {\n      let firebaseService = this.firebase_.INTERNAL.factories[name](\n          this, this.extendApp.bind(this), instanceString);\n      this.services_[name]![instanceSpecifier] = firebaseService;\n      return firebaseService;\n    } else {\n      return this.services_[name]![instanceSpecifier] as FirebaseService | null;\n    }\n  }\n\n  /**\n   * Callback function used to extend an App instance at the time\n   * of service instance creation.\n   */\n  private extendApp(props: {[name: string]: any}): void {\n    deepExtend(this, props);\n  }\n\n  /**\n   * This function will throw an Error if the App has already been deleted -\n   * use before performing API actions on the App.\n   */\n  private checkDestroyed_(): void {\n    if (this.isDeleted_) {\n      error('app-deleted', {'name': this.name_});\n    }\n  }\n};\n\n// Prevent dead-code elimination of these methods w/o invalid property\n// copying.\nFirebaseAppImpl.prototype.name &&\n  FirebaseAppImpl.prototype.options ||\n  FirebaseAppImpl.prototype.delete ||\n  console.log(\"dc\");\n\n/**\n * Return a firebase namespace object.\n *\n * In production, this will be called exactly once and the result\n * assigned to the 'firebase' global.  It may be called multiple times\n * in unit tests.\n */\nexport function createFirebaseNamespace(): FirebaseNamespace {\n  let apps_: {[name: string]: FirebaseApp} = {};\n  let factories: {[service: string]: FirebaseServiceFactory} = {};\n  let appHooks: {[service: string]: AppHook} = {};\n\n  // A namespace is a plain JavaScript Object.\n  let namespace = {\n    // Hack to prevent Babel from modifying the object returned\n    // as the firebase namespace.\n    '__esModule': true,\n    'initializeApp': initializeApp,\n    'app': app as any,\n    'apps': null as any,\n    'Promise': LocalPromise,\n    'SDK_VERSION': '4.0.0',\n    'INTERNAL': {\n      'registerService': registerService,\n      'createFirebaseNamespace': createFirebaseNamespace,\n      'extendNamespace': extendNamespace,\n      'createSubscribe': createSubscribe,\n      'ErrorFactory': ErrorFactory,\n      'removeApp': removeApp,\n      'factories': factories,\n      'useAsService': useAsService,\n      'Promise': local.GoogPromise as typeof Promise,\n      'deepExtend': deepExtend,\n    }\n  };\n\n  // Inject a circular default export to allow Babel users who were previously\n  // using:\n  //\n  //   import firebase from 'firebase';\n  //   which becomes: var firebase = require('firebase').default;\n  //\n  // instead of\n  //\n  //   import * as firebase from 'firebase';\n  //   which becomes: var firebase = require('firebase');\n  patchProperty(namespace, 'default', namespace);\n\n  // firebase.apps is a read-only getter.\n  Object.defineProperty(namespace, 'apps', {\n    get: getApps\n  });\n\n  /**\n   * Called by App.delete() - but before any services associated with the App\n   * are deleted.\n   */\n  function removeApp(name: string): void {\n    let app = apps_[name];\n    callAppHooks(app, 'delete');\n    delete apps_[name];\n  }\n\n  /**\n   * Get the App object for a given name (or DEFAULT).\n   */\n  function app(name?: string): FirebaseApp {\n    name = name || DEFAULT_ENTRY_NAME;\n    let result = apps_[name];\n    if (result === undefined) {\n      error('no-app', {'name': name});\n    }\n    return result;\n  }\n\n  patchProperty(app, 'App', FirebaseAppImpl);\n\n  /**\n   * Create a new App instance (name must be unique).\n   */\n  function initializeApp(options: FirebaseOptions, name?: string): FirebaseApp {\n    if (name === undefined) {\n      name = DEFAULT_ENTRY_NAME;\n    } else {\n      if (typeof name !== 'string' || name === '') {\n        error('bad-app-name', {'name': name + ''});\n      }\n    }\n    if (apps_[name!] !== undefined) {\n      error('duplicate-app', {'name': name});\n    }\n    let app = new FirebaseAppImpl(options, name!,\n                                  ((namespace as any) as FirebaseNamespace));\n    apps_[name!] = app;\n    callAppHooks(app, 'create');\n\n    // Ensure that getUid, getToken, addAuthListener and removeAuthListener\n    // have a default implementation if no service has patched the App\n    // (i.e., Auth is not present).\n    if (app.INTERNAL == undefined || app.INTERNAL.getToken == undefined) {\n      deepExtend(app, {\n        INTERNAL: {\n          'getUid': () => null,\n          'getToken': () => LocalPromise.resolve(null),\n          'addAuthTokenListener': (callback: (token: string|null) => void) => {\n            // Make sure callback is called, asynchronously, in the absence of the auth module\n            setTimeout(() => callback(null), 0);\n          },\n          'removeAuthTokenListener': () => { /*_*/ },\n        }\n      });\n    }\n    return app;\n  }\n\n  /*\n   * Return an array of all the non-deleted FirebaseApps.\n   */\n  function getApps(): FirebaseApp[] {\n    // Make a copy so caller cannot mutate the apps list.\n    return Object.keys(apps_).map((name) => apps_[name]);\n  }\n\n  /*\n   * Register a Firebase Service.\n   *\n   * firebase.INTERNAL.registerService()\n   *\n   * TODO: Implement serviceProperties.\n   */\n  function registerService(\n      name: string, \n      createService: FirebaseServiceFactory,\n      serviceProperties?: {[prop: string]: any}, \n      appHook?: AppHook,\n      allowMultipleInstances?: boolean):\n      FirebaseServiceNamespace<FirebaseService> {\n    if (factories[name]) {\n      error('duplicate-service', {'name': name});\n    }\n    if (!!allowMultipleInstances) {\n      // Check if the service allows multiple instances per app\n      factories[name] = createService;\n    } else {\n      // If not, always return the same instance when a service is instantiated\n      // with an instanceString different than the default.\n      factories[name] =\n          (app: FirebaseApp, extendApp?: (props: {[prop: string]: any}) => void,\n           instanceString?: string) => {\n            // If a new instance is requested for a service that does not allow\n            // multiple instances, return the default instance\n            return createService(app, extendApp, DEFAULT_ENTRY_NAME);\n          };\n    }\n    if (appHook) {\n      appHooks[name] = appHook;\n    }\n\n    let serviceNamespace: FirebaseServiceNamespace<FirebaseService>;\n\n    // The Service namespace is an accessor function ...\n    serviceNamespace = (appArg?: FirebaseApp) => {\n      if (appArg === undefined) {\n        appArg = app();\n      }\n      if (typeof(appArg as any)[name] !== 'function') {\n        // Invalid argument.\n        // This happens in the following case: firebase.storage('gs:/')\n        error('invalid-app-argument', {'name': name});\n      }\n      // Forward service instance lookup to the FirebaseApp.\n      return (appArg as any)[name]();\n    };\n\n    // ... and a container for service-level properties.\n    if (serviceProperties !== undefined) {\n      deepExtend(serviceNamespace, serviceProperties);\n    }\n\n    // Monkey-patch the serviceNamespace onto the firebase namespace\n    (namespace as any)[name] = serviceNamespace;\n\n    return serviceNamespace;\n  }\n\n  /**\n   * Patch the top-level firebase namespace with additional properties.\n   *\n   * firebase.INTERNAL.extendNamespace()\n   */\n  function extendNamespace(props: {[prop: string]: any}): void {\n    deepExtend(namespace, props);\n  }\n\n  function callAppHooks(app: FirebaseApp, eventName: string) {\n    Object.keys(factories).forEach((serviceName) => {\n      // Ignore virtual services\n      let factoryName = useAsService(app, serviceName);\n      if (factoryName === null) {\n        return;\n      }\n\n      if (appHooks[factoryName]) {\n        appHooks[factoryName](eventName, app);\n      }\n    });\n  }\n\n  // Map the requested service to a registered service name\n  // (used to map auth to serverAuth service when needed).\n  function useAsService(app: FirebaseApp, name: string): string | null {\n    if (name === 'serverAuth') {\n      return null;\n    }\n\n    let useService = name;\n    let options = app.options;\n\n    return useService;\n  }\n\n  return (namespace as any) as FirebaseNamespace;\n}\n\ntype AppError = 'no-app'|'bad-app-name'|'duplicate-app'|'app-deleted'|\n    'duplicate-service'|'sa-not-supported'|'invalid-app-argument';\n\nfunction error(code: AppError, args?: {[name: string]: any}) {\n  throw appErrors.create(code, args);\n}\n\n// TypeScript does not support non-string indexes!\n// let errors: {[code: AppError: string} = {\nlet errors: {[code: string]: string} = {\n  'no-app': 'No Firebase App \\'{$name}\\' has been created - ' +\n      'call Firebase App.initializeApp()',\n  'bad-app-name': 'Illegal App name: \\'{$name}',\n  'duplicate-app': 'Firebase App named \\'{$name}\\' already exists',\n  'app-deleted': 'Firebase App named \\'{$name}\\' already deleted',\n  'duplicate-service': 'Firebase service named \\'{$name}\\' already registered',\n  'sa-not-supported': 'Initializing the Firebase SDK with a service ' +\n      'account is only allowed in a Node.js environment. On client ' +\n      'devices, you should instead initialize the SDK with an api key and ' +\n      'auth domain',\n  'invalid-app-argument': 'firebase.{$name}() takes either no argument or a ' +\n      'Firebase App instance.'\n};\n\nlet appErrors = new ErrorFactory<AppError>('app', 'Firebase', errors);"]}